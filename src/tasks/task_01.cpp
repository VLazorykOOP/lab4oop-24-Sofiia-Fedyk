#include <iostream>

#include "console.h"
#include "taskManager.h"
#include "class/vector.h"

// Створити тип даних - клас VectorInt(вектор цілих чисел), який має вказівник на int,
// число елементів size і змінну стану codeError.У класі визначити
// - конструктор без параметрів(виділяє місце для одного елемента та інінціалізує його в нуль);
// - конструктор з одним параметром - розмір вектора(виділяє місце та інінціалізує масив значенням нуль);
// - конструктор із двома параметрами - розмір вектора та значення ініціалізації(виділяє місце(значення перший аргумент) та інінціалізує значенням другого аргументу);
// - конструктор копіювання;
// - деструктор звільняє пам'ять; o перевантаження операцій(операції перевантажувати через функції класу або дружні функції, якщо не вказано яким чином це робити) : void task_01() унарних префіксних та постфіксних ++ та --: одночасно збільшує (зменшує) значення елементів масиву на 1;
// - унарної логічної !(заперечення) : повертає значення true, якщо елем нти якщо size не дорівнює – нулю, інакше false;
// - унарної побітової ~(заперечення) : повертає побітове заперечення для всіх елементів масиву класу вектор;
// - унарний арифметичний - (мінус) : повертає всі елементи масиву класу вектор з протилежним знаком;
// - присвоєння = : копіює вектор(перевантажити через функцію класу);
// - присвоєння з(перевантажити через функцію класу)
// -  += -додаванням векторів;
// - -= -відніманням векторів;
// - *= -множення, вектора на число типу int;
// - /= -ділення, вектора на число типу int;
// - %= -остача від ділення, вектора на число типу int;
// - |= -побітове додаванням векторів;
// - ^= -побітове додавання за модулем 2 векторів;
// - &= -побітове по - елементне множення векторів;
// - арифметичних бінарні : o + -додавання векторів;
// - – - віднімання векторів;
// - * -множення, вектора на число типу int;
// - / -ділення, вектора на число типу int;
// - % -остача від ділення, вектора на число типу int;
// - побітові бінарні
// - | -побітове додавання векторів;
// - ^ -побітове додавання за модулем 2 векторів;
// - & -побітове по - елементне множення векторів;
// - побітові операції зсувів, як дружні операції введення та виведення вектора у потік(перевантажувати через дружні функції)
// - введення >> (побітовий зсув право);
// - введення << (побітовий зсув ліво);
// - рівності == та нерівності !=, функція - операція виконує певні дії над кожною парою елементів векторів за індексом;
// - операцію індексації[] – функцію, яка звертається до елементу масиву за індексом, якщо індекс невірний функція вказує на останній елемент масиву та встановлює код помилки у змінну codeError;
// - розподілу пам’яті new та delete;
// - виклику функції();
// - порівняння(функція - операція виконує певні дії над кожною парою елементів векторів за індексом), які повертають true або false : o > (більше)для двох векторів;
// - >= (більше рівне)для двох векторів;
// - < (менше)для двох векторів;
// -  <= (менше рівне)для двох векторів.

// У змінну стани встановлювати код помилки, коли не вистачає пам'яті, виходить за межі масиву. Передбачити можливість підрахунку числа об'єктів даного типу. Перевірити роботу цього класу.

using namespace std;

void task_01()
{
	Vector<int> v1(1,0);
	// v1.print();

	Vector<double> v2(5, 1.12);
	v2.print();

	Vector<int> v3(5, 2);
	v3.print();

	Vector<int> v4(v3);
	v4.print();

	++v4;
	v4.print();

	v4++;
	v4.print();

	--v4;
	v4.print();

	cout << "!v1: " << (!v1 ? "true" : "false") << endl;
	cout << "!v2: " << (!v2 ? "true" : "false") << endl;
	cout << "!v4: " << (!v4 ? "true" : "false") << endl;

	~v4;
	v4.print();

	-v4;
	v4.print();

	Vector<int> v5;
	v5 = v4;
	v5.print();

	v5 += v1;
	v5.print();

	v5 += v3;
	cout << "v5 += v3: " << endl;
	v5.print();

	v5 -= v3;
	cout << "v5 -= v3: " << endl;
	v5.print();

	v5 *= 2;
	cout << "v5 *= 2: " << endl;
	v5.print();

	v5 /= 2;
	cout << "v5 /= 2: " << endl;
	v5.print();

	v5 %= 2;
	cout << "v5 %= 2: " << endl;
	v5.print();

	v5 |= v3;
	cout << "v5 |= v3: " << endl;
	v5.print();

	Vector<int> v6(5, 2);
	v6.print();

	v5 ^= v6;
	cout << "v5 ^= v6: " << endl;
	v5.print();

	v5 += v3;
	v5.print();

	v5 &= v3;
	cout << "v5 &= v3: " << endl;
	v5.print();

	v5 << 3;
	cout << "v5 << 3: " << endl;
	v5.print();

	cout << "cout << v5: " << v5 << endl;

	int x = v5.getSize();

	cout << "x: " << x << endl;

	v5.empty();

	v5.print();

	v5 = v4;
	v5.print();

	Vector v7(5, 1);
	Vector v8(5, 2);

	cout << "v7 == v8: " << (v7 == v8 ? "true" : "false") << endl;
	cout << "v7 != v8: " << (v7 != v8 ? "true" : "false") << endl;

	cout << "v7 > v8: " << (v7 > v8 ? "true" : "false") << endl;
	cout << "v7 >= v8: " << (v7 >= v8 ? "true" : "false") << endl;
	cout << "v7 < v8: " << (v7 < v8 ? "true" : "false") << endl;
	cout << "v7 <= v8: " << (v7 <= v8 ? "true" : "false") << endl;

	Vector<int> *v = new Vector<int>[2];
	v[0].print();
	v[1].print();
	delete[] v;
}
